<?php

/**
 * @file ebook.module.
 */

define('FILE_TYPE_EBOOK', 1);

/**
 * Implements hook_menu().
 */
function ebook_menu() {
	$items['home'] = array(
		'title' => t('Public Library'),
		'page callback' => 'library_page_callback',
		'page arguments' =>  array('public'),
    	'access arguments' =>  array('access content'),
		'menu_name' => 'main-menu',
		'weight' => 0,
	);

	$items['library'] = array(
	   	'title' => t('My Library'),
      	'page callback' => 'library_page_callback',
		'page arguments' =>  array('private'),
	  	'access callback' => 'user_is_logged_in',
   		'menu_name' => 'main-menu',
		'weight' => 1,
	);
	
	$items['upload'] = array(
	   	'title' => t('Upload'),
      	'page callback' => 'library_page_callback',
		'page arguments' =>  array('upload'),
	  	'access callback' => 'user_is_logged_in',
   		'menu_name' => 'main-menu',
		'weight' => 2,
	);
	
	$items['book'] = array(
	    'page callback' => 'book_page_view',
	    'page arguments' => array(1),
	    'access callback' => 'book_page_access',
	    'access arguments' => array('view', 1),
	);
	
	$items['ajax/annotation_page'] = array(
		'page callback' => 'annotation_get_current_page_view',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
		'delivery callback' => 'ajax_deliver',
	);
	
	return $items;
}

/**
 * Implements hook_theme().
 */
function ebook_theme($existing, $type, $theme, $path) {
	return array(
	    'pdf_js' => array(
	    	'template' => 'pdf_js',
	    	'path' => drupal_get_path('module', 'ebook'),
	    )
	);
}

/**
 * Implementation of the main page view of the ebook system.
 */
function library_page_callback( $arg=NULL ) {
	if ( $arg == 'upload' ) {
		$upload = drupal_render(drupal_get_form('ebook_library_upload_form'));
		$url_import = drupal_render(drupal_get_form('ebook_library_url_form'));
		$output = <<<OUTPUT
			<div id="uploadBox" style="display:block;background-color: #DCEEF0;border:1px solid #B6CFD7" align="center">
				<table>
					<tbody style="border-top:0;">
					    <tr>
							<td valign="top" style="width:50%;border-right:1px solid #AEB5B4;">
							  	{$upload}
							</td>
							<td valign="top">
						      	{$url_import}
							</td>
						</tr>
					</tbody>
				</table>		
			</div>
OUTPUT;
		return $output;
	}
	
	if ( $arg == 'public' || $arg == 'private' ) {
		$fids = ebook_library_get_books($arg);
		$build = array();
		if (empty($fids)) {
			// no book yet. display empty message on the page.
			$link = '<a href="' . url('upload') . '">upload</a>';
	    	$msg = t('There is no book in the library now! To upload books, please click !link.', array('!link' => $link));
			$build['empty'] = array('#markup' => '<p class="error">' . $msg . '</p>');
		}
		else {
			$ebooks = file_load_multiple($fids);
			if ( $arg == 'public' ) {
				foreach($ebooks as $ebook){
					$build['ebooks'][$ebook->fid]['#markup'] = book_view($ebook, 'teaser');		
				}
			}
			else {
				$items = array();
				foreach($ebooks as $ebook){
					$link = ebook_get_pdf_thumbnail($ebook);
					$items[] = $link;
				}
				$build['ebooks']['#markup'] = theme('item_list', array('items'=>$items, 'attributes'=>array('class' => 'book_list')));
			}
			$build['#attached']['css'] = array(drupal_get_path('module', 'ebook') . '/ebook.css');
			$build['pager'] = array('#theme' => 'pager');
		}	
		return $build;	
	}
	
	return MENU_NOT_FOUND;
}

/**
 * This is to return the files for view page
 */
function ebook_library_get_books(  $type='public' ) {
	$query = db_select('file_managed', 'f')->extend('PagerDefault')
		->fields('f', array('fid'))
		->condition('status', FILE_STATUS_PERMANENT)
		->condition('type', FILE_TYPE_EBOOK)
		->orderby('timestamp', 'DESC');
			
	if ($type == 'public') {
		$query->condition('public', FILE_STATUS_PERMANENT)->limit(variable_get('ebook_default_books_public', 10));
	}
	elseif ($type == 'private') {
		global $user;
		$query->condition('public', 0)->condition('uid', $user->uid)->limit(variable_get('ebook_default_books_private', 100));
	}
	else
		return array();
		
	return $query->execute()->fetchCol();
}

/**
 * Form function, called by drupal_get_form() 
 * this is to upload the books
 */
function ebook_library_upload_form($form, &$form_state){
	$allowed_count = ebook_library_get_allowed_count();
	$validators = array(
		'file_validate_extensions' => variable_get('ebook_file_extensions', array('pdf')),
		'file_validate_size' => variable_get('ebook_file_max_size', array(file_upload_max_size())),
		'file_validate_count' => $allowed_count,
	);
	
	global $user;
	$form['#validators'] = $validators;
	$form['upload'] = array(
	    '#type' => 'file',
	    '#title' => t('Select a file from your computer'),
		'#upload_location' => variable_get('ebook_library_path', 'public://books/' . $user->uid),
	    '#upload_validators' => $validators,
		'#description' => theme('file_upload_help', array('description' => '', 'upload_validators' => $validators)),
	);

	$form['set_public'] = array(
		'#type' => 'checkbox', 
		'#title' => t('Upload this file to the public library'),
		'#description' => t('Every one can only upload %total files in totally.<br> You are allowed to upload %left files left.', array('%total' => 30, '%left' => $allowed_count)),
	);
	
	$form['submit'] = array(
	    '#type' => 'submit',
	    '#value' => t('Upload'),
	);

	return $form;
}

/**
 * Upload the file.
 */
function ebook_library_upload_form_submit($form, &$form_state) {
	$filepath = isset($form['upload']['#upload_location']) ? $form['upload']['#upload_location'] : variable_get('ebook_library_path', 'public://books/' . $user->uid);
	file_prepare_directory($filepath, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
	$file = file_save_upload('upload', $form['#validators'], $filepath);
	if($file) {
		// Set the file permanent status
		$file->status = FILE_STATUS_PERMANENT;
		$file->type = FILE_TYPE_EBOOK;
		
		// Set the file access status
		$file_access = $form_state['values']['set_public'];
		if ($file_access) {
			$file->public = FILE_STATUS_PERMANENT;
		}
		if ($file = file_save($file)) {
			drupal_chmod($file->uri);
	    	drupal_set_message(t('The file @name was uploaded', array('@name' => $file->filename)));
			if ($file_access) {
				$form_state['redirect'] = array('home');
			}
			else {
				$form_state['redirect'] = array('library');
			}
		}
		else {
			form_set_error('url', t('An error occurred and no file was uploaded.'));
			return;
		}
	}
	elseif(!$file) {
		form_set_error('upload', t('An error occurred and no file was uploaded.'));
		return;
	}
}

/**
 * Form function, called by drupal_get_form() 
 * this is to linkin the books from outsource
 */
function ebook_library_url_form($form, &$form_state){
	$allowed_count = ebook_library_get_allowed_count();
	$validators = array(
		'file_validate_extensions' => variable_get('ebook_file_extensions', array('pdf')),
//		'file_validate_size' => variable_get('ebook_file_max_size', array(file_upload_max_size())),
		'file_validate_count' => $allowed_count,
	);
	$form['#validators'] = $validators;
	
	$form['url'] = array(
	    '#type' => 'textfield',
	    '#title' => 'Enter a URL',
	    '#default_value' => 'http://',
	    '#maxlength' => 2011,
		'#description' => theme('file_upload_help', array('description' => '', 'upload_validators' => $validators)),
	);
	
	$form['set_public'] = array(
		'#type' => 'checkbox', 
		'#title' => t('Upload this file to the public library'),
		'#description' => t('Every one can only upload %total files in totally.<br> You are allowed to upload %left files left.', array('%total' => 30, '%left' => $allowed_count)),
	);

	$form['submit'] = array(
	    '#type' => 'submit',
	    '#value' => t('Import'),
	);

	return $form;
}

/**
 *  Upload a file from a URL.
 */
function ebook_library_url_form_submit($form, &$form_state) {
	$url = $form_state['values']['url'];
	$scheme = file_uri_scheme($url);
	if ($scheme == 'http' || $scheme == 'https') {
		$file = new stdClass();
		$file->filename = basename($url);
		
		$file_extensions = $form['#validators']['file_validate_extensions'][0];
		if ($errors = file_validate_extensions($file, $file_extensions)) {
			form_set_error('url', reset($errors));
			return;
		}
		
//		//@TODO Check the file size of the external url
//		$file_maxsize = $form['#validators']['file_validate_size'][0];
//		if ($errors = file_validate_size($file, $file_maxsize)) {
//			form_set_error('url', reset($errors));
//			return;
//		}
		
		$uri = getLocalFilePath($url);
		$query = db_select('file_managed', 'f')
	        ->fields('f', array('fid'))
	        ->condition('uri', $uri)
	        ->execute()
	        ->fetchCol();
		if (!empty($query)) {
			form_set_error('url', t('You have imported the file !link before.', array('!link' => $url)));
			return;
		}
		else {
			global $user;
		    // Building the file object.
			$file->uid      = $user->uid;
			$file->status   = FILE_STATUS_PERMANENT;
			$file->uri      = $uri;
			$file->filemime = file_get_mimetype($file->filename);
			$file->filesize = 0;
			$file->public   = FILE_STATUS_PERMANENT;
			$file->type     = FILE_TYPE_EBOOK;
			
			// Set the file access status
			$file_access = $form_state['values']['set_public'];
			if ($file_access) {
				$file->public = FILE_STATUS_PERMANENT;
			}
	      
			if ($file = file_save($file)) {
				drupal_chmod($file->uri);
		    	drupal_set_message(t('The file @name was imported', array('@name' => $url)));
				if ($file_access) {
					$form_state['redirect'] = array('home');
				}
				else {
					$form_state['redirect'] = array('library');
				}
			}
			else {
				form_set_error('url', t('An error occurred and no file was imported.'));
				return;
			}
		}
	}
	else {
		form_set_error('url', t( 'Unable to handle the provided URL @name, please check the URL and try again!', array('@name' => $url) ));
		return;
	}
}

/**
 * The ebook page access callback
 */
function book_page_access( $op='view', $book ) {
	if ($ebook = file_load($book)) {
		global $user;
		if ($ebook->public == FILE_STATUS_PERMANENT)
			return TRUE;
		elseif ($ebook->uid == $user->uid)
			return TRUE;
		return FALSE;
	}
	else {
		return FALSE;
	}
}

/**
 * The ebook page callback
 */
function book_page_view( $book ) {
	if ($ebook = file_load($book)) {
		drupal_set_breadcrumb('');
		ebook_pdf_reader_load_pdf_js(file_create_url($ebook->uri));
      	return theme('pdf_js');
	}
	else
		return MENU_NOT_FOUND;
}

/**
 * This is to return the view of an ebook
 */
function book_view( $file, $view_mode = 'full', $langcode = NULL ) {
  	$src = ebook_get_pdf_thumbnail($file);
  	$title = truncate_utf8($file->filename, 20, false, true);
  	drupal_add_css(drupal_get_path('module', 'ebook') . '/ebook.css'); 
  	
  	$markup = <<<OUTPUT
  		<div class="book book-teaser clearfix">
			<div class="book-teaser-thumbnail">
				{$src}
			</div>
			<div class="book-teaser-title">
  				{$title}
			</div>
			<div class="book-teaser-description">
				{$title}
			</div>
		</div>
OUTPUT;
  
	return $markup;
}

function ebook_pdf_reader_load_pdf_js( $url ) {
	$path = drupal_get_path('module', 'ebook');
	$full_path = base_path() . $path;
	drupal_add_js("$path/js/pdf.js");
	drupal_add_js("PDFJS.workerSrc = '$full_path/js/pdf.js'", 'inline');
	drupal_add_js("$path/js/debugger.js");
	drupal_add_js("$path/js/l10n/l10n.js");
	drupal_add_js("$path/js/compatibility.js");
	drupal_add_js("$path/js/viewer.js");
	drupal_add_js("$path/js/annotation.js");
	drupal_add_css("$path/pdf_reader-viewer.css");
	drupal_add_js('DEFAULT_URL = "' . $url . '";', 'inline');
}

/**
 * This is to return the allowed file count for uploading
 */
function ebook_library_get_allowed_count() {
	$allowed_count = 30;
	return $allowed_count;
}

/**
 * This is to return the allowed file count for uploading
 */
function ebook_get_pdf_thumbnail( $file ) {
	$thumbnail_path = drupal_get_path('module', 'ebook') . '/book_bg.png';
	$thumbnail = '<img src="' . url($thumbnail_path, array('absolute'=>TRUE)) . '" alt="' . $file->filename . '"></img>';
	return '<a href="' . url("book/{$file->fid}") . '">' . $thumbnail . '</a>';
}

/**
 * Create the PDF thumbnail.
 *
 * @param object $file
 *   The file object to convert
 *
 * @return string
 *   Drupal thumbnail path or NULL.
 */
function ebook_create_pdf_thumbnail( $file ) {
	if ($file->filemime == "application/pdf") {
	    $src = drupal_realpath($file->uri) . "[0]";
	    $dest = file_directory_temp() . "/" . $file->filename . ".png";
	
	    if (file_exists($dest)) {
			unlink($dest);
	    }
	
	    $exec = variable_get('ebook_pdfthumbnail_convertpath', NULL) . " " . escapeshellarg($src) . " " . escapeshellarg($dest);
	    if (function_exists("exec")) {
			exec($exec, $array, $status);
	    }
	    elseif (function_exists("system")) {
			system($exec, $status);
	    }
	    elseif (function_exists("passthru")) {
			passthru($exec, $status);
	    }
	
	    if ($status == 0) {
			return $dest;
    	}
	    else {
			drupal_set_message(t("Error while creating PDF Thumbnails."), "error");
			watchdog("pdfthumbnail", "Error during the converstion from the file @src to @dest with the command @exec", array('@src' => $src, '@dest' => $dest, '@exec' => $exec), WATCHDOG_WARNING);
			return NULL;
	    }
	}
	else {
		return NULL;
	}
}

/**
 * This is to save a file from external url
 */
function getLocalFilePath($url) {
    global $user;
    $local_path = variable_get('ebook_library_path', 'public://books/' . $user->uid) . '/' . basename($url);
    if (!file_exists(drupal_realpath($local_path))) {
		$dirname = drupal_dirname($local_path);
		file_prepare_directory($dirname, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
		@copy($url, $local_path);
		drupal_chmod($local_path);
    }
    return $local_path;
}


function annotation_get_current_page_view() {
	$bid = $_REQUEST['bid'];
	$pid = $_REQUEST['pid'];
	if(isset($bid)&&isset($pid)&&(function_exists('annotation_block_get_current_page_view'))){
		die(drupal_json_encode(annotation_block_get_current_page_view($bid,$pid)));
	}
	else {
		$ret = array('error' => t('Invalid Request'));
		die(drupal_json_encode($ret));
	}
}