<?php
function friends_menu() {
	// action callback
	$items['friends/request/%/%'] = array(
		'title' => 'Request',
		'access callback' => '_friends_access',
		'page callback' => 'friends_action_callback',
		'page arguments' => array(2, 3),
		'type' => MENU_CALLBACK,
		'file' => 'friends.pages.inc'
	);
	
	// for ajax action callback
	$items['friends/request/%/%/ajax'] = $items['friends/request/%/%'];
	$items['friends/request/%/%/ajax']['page callback'] = 'friends_action_ajax_callback';
	$items['friends/request/%/%/ajax']['delivery callback'] = 'ajax_deliver';

	//Friend group menu
	$items['friends'] = array(
		'title' => 'My Friends',
		'title callback'   => '_friends_title_callback',
		'access callback' => '_friends_access',
		'access arguments' => array ('view'),
		'page callback' => 'friends_friends_page',
		'menu_name' => 'main-menu',
		'weight' => 3,
		'file' => 'friends.pages.inc',
	);

	$items['friends/group'] = array (
		'title' => t('My Friends'),
		'type' => MENU_DEFAULT_LOCAL_TASK,
	);
	
	$items['friends/group/add'] = array (
		'title' => 'Add Group',
		'access callback' => '_friends_access',
		'page callback'	=> 'drupal_get_form',
		'page arguments' => array ('friends_edit_form'),
		'type' => MENU_CALLBACK,
		'weight' => 2,
		'file' => 'friends.forms.inc',
	);

	$items["friends/group/%/edit"] = array (
		'title' => 'Edit Group',
		'access callback' => '_friends_access',
		'page callback'	=> 'drupal_get_form',
		'page arguments' => array('friends_edit_form', 2),
		'type' => MENU_CALLBACK,
		'weight' => 1,
		'file' => 'friends.forms.inc',					
	);

	$items["friends/group/%/delete"] = array (
		'title' => 'Delete Group',
		'access callback' => '_friends_access',
		'page arguments' => array('friends_delete_form', 2),
		'page callback'	=> 'drupal_get_form',
		'type' => MENU_CALLBACK,
		'weight' => 3,		
		'file' => 'friends.forms.inc',
	);

	$items['friends/requests'] = array (
		'title callback' => '_friends_title_callback_pending',
		'title arguments' =>array('Pending'),
		'access callback' => '_friends_access',
		'page callback' => 'friends_pending_requests_page',
		'page callback' => 'drupal_get_form',
		'page arguments' =>array('friends_request_form', 'received'),
		'file' => 'friends.forms.inc',
		'type' => MENU_LOCAL_TASK,
		'weight' => 2,
	);

	$items['friends/requests/received'] = array (
		'title callback' => '_friends_title_callback_pending',
		'title arguments' =>array('Received'),
		'access callback' => '_friends_access',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 0,
	);

	$items['friends/requests/sent'] = array (
		'title callback' => '_friends_title_callback_pending',
		'title arguments' =>array('Sent'),
		'access callback' => '_friends_access',
		'page callback' => 'drupal_get_form',
		'page arguments' =>array('friends_request_form', 'sent'),
		'file' => 'friends.forms.inc',	
		'type' => MENU_LOCAL_TASK,
		'weight' => 1,
	);
	
	return $items;
}

/**
 * Implements hook_menu_alter()
 * 
 * Change the access of user content pages.
 */
function friends_menu_alter(&$items){
	$types = array_keys(node_type_get_types());
	foreach($items as $path => $item){
		if( strpos($path, 'user/%user/') === 0 ) {
			if( isset($item['type']) && $item['type'] == MENU_LOCAL_TASK && $item['access arguments'] == array('access content') ){
				$items[$path]['access callback'] = '_friends_user_page_access';
				$items[$path]['access arguments'] = array(1);
			}
		}
	}
}

function _friends_user_page_access($account){
	global $user;
	if( $user->uid == $account->uid || friends_is_friend($account->uid, $user->uid)){
		return TRUE;
	}
	return FALSE;
}

/**
 * Implements hook_perm().
 */
function friends_permission() {
	return array(
    'administer user relationships' => array(
      'title' => t('Administer User Relationships'),
      'description' => t('Allows to administer user relationships and view relationships of all users.'),
	),
    'maintain own relationships' => array(
      'title' => t('Maintain own relationships'),
      'description' => t('Allows to maintain own relationships including approving, removing and creating.'),
	),
    'view user relationships' => array(
      'title' => t('View own user relationships'),
      'description' => t('Allows to view own relationships.'),
	),
	);
}

function friends_user_delete( $account ) {
	db_delete('user_relationships')
	->condition(db_or()
		->condition('requester_id', $account->uid)
		->condition('requestee_id', $account->uid))
	->execute();

	db_delete('user_relationship_types')
	->condition('owner_uid', $account->uid)
	->execute();
}

function friends_user_relationships_delete($relationship, $action){
	if($action != 'remove' || $relationship->rtid != variable_get('friends_default_group_id', '1'))
	return;

	global $user;
	if($user->uid != $relationship->requester_id && $user->uid != $relationship->requestee_id ){
		watchdog('error', $user->uid . ' try to delete friendship between ' . $relationship->requester_id .' and ' . $relationship->requestee_id);
		return;
	}

	// if is default relationship type, remove all relationships in customized relationship types
	$del_relationships = user_relationships_load(array('between'=>array($relationship->requester_id, $relationship->requestee_id), 'approved'=>1));
	foreach($del_relationships as $del_relationship) {
		user_relationships_delete_relationship($del_relationship, $user->uid);
	}
}

function friends_user_relationships_save($relationship, $action){
	if( $relationship->rtid != variable_get('friends_default_group_id', 1) )
	return;

	if( $action!='request' && $action!='approve' )
	return;

	_friends_send_mail($action, $relationship);
}

/**
 * Implements hook_query_alter
 */
function friends_query_alter($query){
	global $user;
	if( $query->hasTag('search_user') ) {
		$friends = friends_get_friends();  	 
		$query->condition('u.uid', $friends, 'IN');
  }
}

function friends_form_user_preference_form_alter(&$form, &$form_state){
	$account = $form['#account'];
	
	$options['mail'] = t('Email');
	$options['none'] = t('Do\'t send me any notification.');
	
	if(module_exists('privatemsg'))
	$options['pm'] = t('Private Message');
	
	$form['settings']['friends'] = array(
		'#type' => 'container',
	);
		
	$form['settings']['friends']['notify_method'] = array(
		'#type' => 'select',
		'#title' => t('Notification method of new friend request'),
		'#options' => $options,
	 	'#default_value' => isset($account->data['friends']['notify_method'])?$account->data['friends']['notify_method']:'mail',
	);		
}

/**
 * Implements hook_user_view().
 * 
 * Add friendship request/status link to the user page.
 */
function friends_user_view($account, $view_mode, $langcode) {
  $account->content['friends'] = array(
    '#markup' => friends_request_link($account),
  );
}

/////////////////////////
//// All hooks above ////
/////////////////////////
/**
 * Get a link requesting an friendship of a user.
 */
function friends_request_link($account){
	global $user;
	
	if( !$user->uid || $user->uid == $account->uid )
	return;
	
	$relationships = user_relationships_load(array('between' => array($account->uid, $user->uid), 'rtid' => variable_get('friends_default_group_id', 1)));
	
	if ( !empty($relationships) ) {
	  $relationship = array_shift($relationships);
	  if( $relationship->approved == 1 ){
	  	$msg = '!name is a friend of you.';	
	  } else if ( $relationship->requester_id == $user->uid ) {
	  	$msg = 'You have sent a friend request to !name.';			
	  } else if ( $relationship->requestee_id == $user->uid ) {
	  	$msg = '!name has sent you a friend request.';
	  }
	  $msg = t($msg, array('!name' => $account->name));
	} else {
		drupal_add_library('system', 'drupal.ajax');
		
	  $rtype = user_relationships_type_load(array('rtid'=>variable_get('friends_default_group_id', 1)));
	  $text = t('Add as !name', array('!name' => $rtype->name));
	  $msg = '<a href="' . url("friends/request/add/{$account->uid}/nojs") . '" class="use-ajax" id="friend-request-' . $account->uid.'">' . $text . '</a>';		
	}
	return $msg;
}

/**
 * Get friend groups of an user
 */
function friends_get_groups( $uid ) {
	$result = db_select('user_relationship_types', 't')
	->fields('t', array('rtid', 'name'))
	->condition(db_or()
		->condition('owner_uid', $uid)
		->condition('owner_uid', 0))
	->orderby('rtid', 'DESC')
	->execute()
	->fetchAll();	
	return $result;
}

/**
 * Return all friends of a user
 */
function friends_get_friends($uid = NULL){
	global $user;	
	if( !$uid )
	$uid = $user->uid;
	
	$rtid = variable_get('friends_default_group_id', 1);	
	$friendships = user_relationships_load(array('requester_id' => $uid, 'approved' => 1, 'rtid' => $rtid));
	$friends = array();
	foreach($friendships as $friendship){
		$friends[] = $friendship->requestee_id;
	}
	return $friends;
}

/**
 * Return all friends of a user
 */
function friends_get_friends_count($uid=NULL){
	global $user;	
	if(!$uid)
	$uid = $user->uid;
	
	$rtid = variable_get('friends_default_group_id', 1);	
	return user_relationships_load(array('requester_id' => $uid, 'approved' => 1, 'rtid' => $rtid), array('count' => TRUE));
}

/**
 * Check if two users are friends of each other.
 */
function friends_is_friend($uid1, $uid2){
	$rtid = variable_get('friends_default_group_id', 1);
	$friendships = user_relationships_load(array('between' => array($uid1, $uid2), 'approved' => 1, 'rtid' => $rtid));
	return !empty($friendships);	
}

///////////////////////////////////////////////////////////////////////
/// functions below are not supposed to be called from other module ///
///////////////////////////////////////////////////////////////////////

function _friends_title_callback() {
	global $user;
	
	$rtid = variable_get('friends_default_group_id', 1);
	$count = user_relationships_load(array('requestee_id' => $user->uid, 'approved' => FALSE, 'rtid' => $rtid), array('count' => TRUE));
	
	if ($count > 0) {
		return format_plural($count, t('My Friends') . ' (1)', t('My Friends') . ' (@count)');
	}	 
	return t('My Friends');
}

function _friends_title_callback_pending($action){
	global $user;

	switch ($action){
		case 'Received':
			$count = user_relationships_load(array('requestee_id' => $user->uid, 'approved' => FALSE), array('count' => TRUE));
			break;
		case 'Sent':
			$count = user_relationships_load(array('requester_id' => $user->uid, 'approved' => FALSE), array('count' => TRUE));
			break;
		default:
			$count = user_relationships_load(array('user' => $user->uid, 'approved' => FALSE), array('count' => TRUE));
			break;
	}

	if ($count > 0)
	return format_plural($count, '@action request (1)',  '@action requests (@count)', array('@action' =>t($action)));
	
	return t('@action requests', array('@action' =>t($action)));
}

/**
 * Check whether one user could add groups through the 'add group' tab
 */
function _friends_access($action = 'edit', $account = NULL) {
	if (user_access('administer user relationships'))
	return TRUE;

	if (!user_access('can have relationships'))
	return FALSE;

	global $user;
		
	switch ($action) {
		case 'view':
			if (user_access('maintain own relationships') || user_access('view user relationships'))
			return TRUE;
			break;
		case 'edit':
			if (user_access('maintain own relationships'))
			return TRUE;
			break;
		case 'user':
			if ($account->uid == $user->uid && user_access('view user relationships'))
			return TRUE;
			break;
	}
	
	return FALSE;
}

function _friends_action_link( $action, $rid = NULL ){
	return '<a href="' . url("friends/request/$action/$rid/nojs") . '" class="use-ajax '. $action .'">' . t(ucfirst($action)) . '</a>';
}

function _friends_group_action_links($rtid) {
	$links[] = l('Add Group', 'friends/group/add');
	if( $rtid != variable_get('friends_default_group_id', 1) ){
		$links[] = l('Edit Group', "friends/group/$rtid/edit");
		$links[] = l('Delete Group', "friends/group/$rtid/delete");
	}
	return $links;
}

function _friends_send_mail($action, $relationship){
	switch($action){
		case 'request':
			$msg = _friends_request_message($relationship);
			break;
		case 'approve':
			$msg = _friends_approve_message($relationship);
			break;
		default:
			return;
	}

	$requestee = user_load($relationship->requestee_id);
	$method = isset($requestee->data['friends']['notify_method'])?$requestee->data['friends']['notify_method']:'mail';

	if( $method == 'pm' && module_exists('privatemsg') ){
	 	// send a privatemsg
		privatemsg_new_thread( array($requestee), $msg['subject'], $msg['content']['rich'] );
	} elseif( $method == 'mail') {
		// send an email
		$from = variable_get('site_name', '') . '<' . variable_get('site_mail', '') . '>';
		$to = $requestee->name . '<' . $requestee->mail . '>';
	
		$message = drupal_mail('friends', 'notice', $to, user_preferred_language($requestee), array(), $from, FALSE);
		$message['headers']['Content-Type'] = 'multipart/mixed; charset=UTF-8; format=flowed';	
		$message['subject'] = $msg['subject'];
		$message['body'] = $msg['content']['rich'];
		$message['params']['plaintext'] =  $msg['content']['plain'];
	
		$system = drupal_mail_system('friends', 'relationship');
		$message = $system->format($message);
	
		return $system->mail($message);
	}
}
function _friends_request_message($relationship) {
	// TODO: format rich format mail
	$from = user_load($relationship->requester_id);
	$to = user_load($relationship->requestee_id);
		
	$subject = t('New friend request from @name', array('@name' => $from->name));

	$accept =  l(t('Accept'), "friends/request/approve/{$relationship->rtid}", array('absolute'=>TRUE));
	$decline = l( t('Decline'), "friends/request/decline/{$relationship->rtid}", array('absolute'=>TRUE));

	$plain[] = t("Hi !username,", array('!username' => $to->name));
	$plain[] = '';
	$plain[] = t('!name has sent you a friend request.', array('!name'=>l($from->name, "user/{$from->uid}", array('absolute'=>TRUE))));
	$plain[] = t('You can !accept or !decline', array('!accept' => $accept, '!decline' => $decline));
	$plain[] = '';
	$plain[] = t('View all pending friend requests !link.', array('!link' => l(t('here'), 'friends/requests', array('absolute'=>TRUE))));

	return array(
		'subject' => $subject, 
		'content' => array(
			'rich' => $plain,
			'plain' => implode("\n", $plain),
		),
	);
}

function _friends_approve_message($relationship){
	// TODO: format rich format mail	
	$from = user_load($relationship->requester_id);
	$to = user_load($relationship->requestee_id);
	
	$subject = t('@name has approved your friend request.', array('@name'=>$from->name));
	
	$plain[] = t("Hi !username,", array('!username'=>$to->name));
	$plain[] = ' ';
	$plain[] = t("!name has accepted your friend request.", array('!name'=>l($from->name, "user/{$from->uid}", array('absolute'=>TRUE))));

	return array(
		'subject' => $subject, 
		'content' => array(
			'rich' => $plain, 
			'plain' => implode("\n", $plain) 
		),
	);
}
