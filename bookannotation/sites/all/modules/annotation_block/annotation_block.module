<?php
/**
 * @file annotation_block.module
 */

/**
 * Implements hook_theme()
 */
function annotation_block_theme(){
	return array(
		'annotation_teaser' => array(
			'variables' => array('user_picture' => NULL, 'annotation' => NULL, 'content' => NULL),
			'template' => 'annotation',
		),
	);	
}

/**
 * Implements hook_block_info()
 */
function annotation_block_block_info() {
	$blocks['annotation_index'] = array (
		'info' => t('Annotation Index'),
		'cache' => DRUPAL_NO_CACHE,
		'region' => 'sidebar_first',
		'status' => 1,
		'weight' => -1,
		'visibility' => BLOCK_VISIBILITY_LISTED,
		'pages' => implode("\n", array('book/*')),
	);
	
	$blocks['annotation_page'] = array (
		'info' => t('Annotation Current Page'),
		'cache' => DRUPAL_NO_CACHE,
		'region' => 'sidebar_second',
		'status' => 1,
		'weight' => -5,
		'visibility' => BLOCK_VISIBILITY_LISTED,
		'pages' => implode("\n", array('book/*')),
	);
	
	return $blocks;
}

/**
 * Implements hook_block_view()
 */
function annotation_block_block_view( $block_name ) {
	if (!is_numeric(arg(1)))
	return;
	$book_id = arg(1);
	if (book_page_access( 'view', $book_id )) {
		switch($block_name){
			case 'annotation_index':
				$block['subject'] = t('Annotation Index');
				$search = <<<OUTPUT
					<div>
						serach form
					</div>
OUTPUT;
				$block['content']['search']['#markup'] = '<input id="book_id" type="button" class="hidden" value="' . $book_id . '">';// . $search
				$aids = annotation_block_get_annotations('index', $book_id);
				if (!empty($aids)) {
					$annotations = annotation_load_multiple($aids);
					$block['content']['annotations']['#prefix'] = '<div id="annotation-list">';
					$block['content']['annotations']['#suffix'] = '</div>';
					foreach ($annotations as $annotation) {
						$block['content']['annotations'][$annotation->aid] = annotation_view($annotation);
					}
					$block['content']['annotations']['pager'] = array('#theme' => 'pager');
				}
				break;
			case 'annotation_page':
				$block['subject'] = t('Annotation Current Page');
				$aids = annotation_block_get_annotations('page', $book_id);
				if (!empty($aids)) {
					$annotations = annotation_load_multiple($aids);
					$block['content']['annotations']['#prefix'] = '<div id="annotation-list">';
					$block['content']['annotations']['#suffix'] = '</div>';
					foreach ($annotations as $annotation) {
						$block['content']['annotations'][$annotation->aid] = annotation_view($annotation, 'full');
					}
					$block['content']['annotations']['pager'] = array('#theme' => 'pager');
				}
				break;
			default:
				return;
		}
		
		$block['content']['#attached']['css'][] = drupal_get_path('module', 'annotation_block').'/annotation_block.css';
		$block['content']['#attached']['js'][] = drupal_get_path('module', 'annotation_block').'/annotation_block.js';
		return $block;
	}
}

/**
 * Implements hook_query_TAG_alter().
 */
/*function annotation_block_query_annotation_access_alter(QueryAlterableInterface $query) {
	global $user;
	if (user_access('bypass node access', $user)) {
    	return;
  	}
}*/

/**
 * Gets objects from the static cache.
 *
 * @param array $aids
 *   If not empty, return objects that match these IDs.
 * @param array $conditions
 *   If not empty, return objects that match conditions.
 *
 * @return
 *   Array of objects from the annotation cache.
 */
function annotation_cacheGet($aids, $conditions = array()) {
	$objects = array();

    if ($cache = cache_get('annotation_objects')) {
    	if ($aids) {
    		$objects += array_intersect_key($cache->data, array_flip($aids));
    	}
    	else if ($conditions) {
    		$objects = $cache->data;
    	}
    }
    
	if ($conditions) {
	    foreach ($objects as $object) {
	    	$object_values = (array) $object;
	      	if (array_diff_assoc($conditions, $object_values)) {
	        	unset($objects[$object->aid]);
	      	}
	    }
	}
    
  	return $objects;
}

/**
 * Load annotations from the database.
 *
 * @param $aids
 *   An array of annotation IDs.
 * @param $conditions
 *   Whether to reset the internal annotation_load cache.
 *
 * @return
 *   An array of annotations indexed by aid.
 */
function annotation_load_multiple($aids = array(), $conditions = array()) {
	$annotations = array();
	$passed_ids = !empty($aids) ? array_flip($aids) : FALSE;
	$annotations += annotation_cacheGet($aids, $conditions);
    if ($passed_ids) {
		$aids = array_keys(array_diff_key($passed_ids, $annotations));
	}
	
	if ($aids === FALSE || $aids || ($conditions && !$passed_ids)) {
    	// Build the query.
    	$query = db_select('annotation', 'a')->extend('PagerDefault');
		$query->join('annotation_link', 'l', 'l.aid=a.aid');
		$query
		->fields('l')
		->fields('a', array('uid', 'body', 'attachment'));
		if (isset($aids) && !empty($aids)) {
			$query->condition('a.aid', $aids, 'IN');
		}
		foreach ($conditions as $key => $value) {
			$query->condition('a.'. $key, $value);
		}
		$queried_files = $query->execute()->fetchAllAssoc('aid');
	}
	
	if (isset($queried_files) && !empty($queried_files)) {
		// Add folders to the cache.
    	$annotations += $queried_files;
    	cache_set('annotation_objects', $annotations, 'cache');
	}

	if ($passed_ids) {
		$passed_ids = array_intersect_key($passed_ids, $annotations);
		foreach ($annotations as $annotation) {
			$passed_ids[$annotation->aid] = $annotation;
		}
		$annotations = $passed_ids;
	}
	return $annotations;
}

/**
 * Load a annotation object from the database.
 *
 * @param $aid
 *   The annotation ID.
 *
 * @return
 *   A fully-populated annotation object, or FALSE if the annotation is not found.
 */
function annotation_load($aid) {
	$annotations = annotation_load_multiple(array($aid), array());
	return $annotations ? reset($annotations) : FALSE;
}

/**
 * Implements the view of the annotation.
 */
function annotation_view($annotation, $viewmode='teaser') {
	if ($viewmode == 'teaser') {
		$content = truncate_utf8($annotation->content, 100, true, true);
		$content .= '<a href="" class="more-link" id="page-' . $annotation->pid . '">' . t('More') . '</a>';
	}
	elseif ($viewmode == 'full') {
		$content = $annotation->body;
		$content .= annotation_attachment_view($annotation);
	}
	else
	return $viewmode;
	
	return array(
		'#theme' => 'annotation_teaser', 
		'#user_picture' => theme('user_picture', array('account' => user_load($annotation->uid))),
		'#annotation' => $annotation->aid,
		'#content' => $content,
	);
}

function annotation_attachment_view( $annotation ) {
	if( !isset($annotation->attachment) )
	return '';

	$output = '';
	$annotation->attachment = unserialize($annotation->attachment);
	switch( $annotation->attachment['type'] ){
		case 'image':
	  		$output = <<<EOF
<div class="attached image">
	<div class="image-wrapper">
		<a href="{$annotation->attachment['url']}">
		<img src="{$annotation->attachment['url']}">
		</a>
	</div>
</div>
EOF;
	  	break;
		case 'video':
	  		require_once 'video-parser.inc';
	  		$embedCode = VideoParser::getEmbedCode($annotation->attachment['site'], $annotation->attachment['id']);
				$output = <<<EOF
<div class="attached video">
	<div class="video-title"><a href="{$annotation->attachment['url']}">{$annotation->attachment['title']}</a></div>
	<a href="javascript:void(0)" class="video-play">
  	<img class="video-thumbnail" src="{$annotation->attachment['thumbnail']}">
	</a>
	<div class="video-embed" style="display:none;">{$embedCode}</div>
</div>
EOF;
		break;
	 	case 'page':
	  		$title = isset($annotation->attachment['title']) ? $annotation->attachment['title'] : $annotation->attachment['url'];	
	  		$class = '';
	  		$output[] = '<div class="attached page">';
				if(isset($annotation->attachment['img'])){
					$class = ' class="right"';
					$output[] = '<div class="page-image image-wrapper left"><a href="'.$annotation->attachment['img'].'"><img src="' . $annotation->attachment['img'] . '"></a></div>';
				}		
				$output[] = '<div '.$class.'><div class="page-title"><a href="' . $annotation->attachment['url']. '">' . $title . '</a></div>';
				if(isset($annotation->attachment['desc']))
				$output[] = '<div class="page-description">' . $annotation->attachment['desc'] . '</div>';
				
				$output[] = '</div></div>';
				
				$output = implode("\n", $output);
	  		break;
	}	
	return $output;
}

/**
 * This is to return the annotations for annotation block view
 */
function annotation_block_get_annotations( $type, $book_id, $page_id=1 ) {
	if ($type != 'index' && $type != 'page') {
		return array();	
	}
	
	global $user;
	$query = db_select('annotation', 'a')->extend('PagerDefault');
	$query->join('annotation_link', 'l', 'l.aid=a.aid');
	$query
	->fields('a', array('aid'))
	->condition('l.bid', $book_id)
	->orderby('a.timestamp', 'DESC')
	->limit(variable_get('annotation_default_list_main', 5));
	
	// The access conditions
	$or = db_or();
	$private = db_and()->condition('a.access', ANNOTATION_PRIVATE)->condition('a.uid', $user->uid);
	$or->condition($private);
	$fids = friends_get_friends($user->uid);
	if (!empty($fids)) {
		$friend = db_and()->condition('a.access', ANNOTATION_FRIEND)->condition('a.uid', $fids, 'IN');
		$or->condition($friend);
	}
	$or->condition('a.access', ANNOTATION_PUBLIC);
	$query->condition($or);
	
	if ($type == 'page') {
		$query->condition('l.pid', $page_id);
	}		
	return $query->execute()->fetchCol();
}

/**
 * The annotation current page block view callback
 */
function annotation_block_get_current_page_view($bid, $pid) {
	$aids = annotation_block_get_annotations('page', $bid, $pid);
	if (!empty($aids)) {
		$annotations = annotation_load_multiple($aids);
		$build['#prefix'] = '<div id="annotation-list">';
		$build['#suffix'] = '</div>';
		foreach ($annotations as $annotation) {
			$build[$annotation->aid] = annotation_view($annotation);
		}
		$build['pager'] = array('#theme' => 'pager');
		return array(
			'annotation' => $annotations,
			'html' => drupal_render($build),
		);
	}
	else
	return array();
}
