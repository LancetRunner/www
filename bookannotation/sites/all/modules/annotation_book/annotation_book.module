<?php

define('ANNOTATION_PRIVATE', 0);
define('ANNOTATION_PUBLIC', 1);
define('ANNOTATION_FRIEND', 2);

/**
 * Implement hook_menu
 * Create pages for annotation
 */
function annotation_book_menu(){
	$items['admin/config/content/annotation'] = array(
		'title' => t('Annotation'),
		'description' => 'Configure annotation',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('annotation_book_settings_form'),
		'access arguments' => array('administer site configuration'),
		'file' => 'annotation_book.admin.inc',
	);
	
	$items['ajax/annotation_book'] = array(
		'page callback' => 'annotation_book_ajax_callback',
		'access callback' => 'user_is_logged_in',
		'type' => MENU_CALLBACK,
		'delivery callback' => 'ajax_deliver',
	);
	
	return $items;
}

/**
 * Implements hook_theme()
 */
function annotation_book_theme(){
	return array(
		'page_info' => array(
			'variables' => array('title' => NULL, 'description' => NULL, 'images' => NULL),
			'template' => 'page-info',
		),
		'annotation_book_post_block' => array(
			'variables' => array('links' => NULL),
			'template' => 'annotation-post-box',
		),
	);	
}

/**
 * Implements hook_block_info()
 */
function annotation_book_block_info() {
	return array(
		'postbox' => array (
			'info' => t('Annotation Post Box'),
			'cache' => DRUPAL_NO_CACHE,
			'region' => 'sidebar_second',
			'status' => 1,
			'weight' => -10,
			'visibility' => BLOCK_VISIBILITY_LISTED,
			'pages' => implode("\n", array('book/*')),
	));	
}

/**
 * Implements block_view()
 */
function annotation_book_block_view( $block_name ) {
	if( !user_is_logged_in() || $block_name != 'postbox' )
	return;
	
	if (!is_numeric(arg(1)))
	return;

	$path = drupal_get_path('module', 'annotation_book');	
	$attached['css'][] = $path . '/css/postbox.css';
	$attached['js'][] = $path . '/js/postbox.js';	
	$attached['js'][] = array('type' => 'setting', 'data' =>array(
		'annotation_book' => array(
			'maxlength' => variable_get('annotation_book_maxlength', 255),
			'timeout' => variable_get('annotation_book_timeout', 60),
		),
	));
	
	// emotion icons
	if( module_exists('emotify') ){ 
		$attached['library'][] = array('emotify', 'emotify');
		$links[] = '<a href="#emotion-dialog" class="emotion">' . t('Emotion') . '</a>';
	}
	
	// share webpage
	$links[] = '<a href="#webpage-dialog" class="webpage">' . t('Webpage') . '</a>';

	// share image
	$uploaders = array();
	
	$links[] = '<a href="#image-dialog" class="image">' . t('Image') . '</a>';
//	$uploader = drupal_render(drupal_get_form('annotation_book_image_uploader_form'));		
//	$uploaders[] = '<div id="image-uploader" style="position: absolute;left: -10000px;">' . $uploader . '</div>';

	// share video
	$links[] = '<a href="#video-dialog" class="video">' . t('Video') . '</a>';
//	$uploader = drupal_render(drupal_get_form('annotation_book_video_uploader_form'));				
//	$uploaders[] = '<div id="video-uploader" style="position: absolute;left: -10000px;">' . $uploader . '</div>';

	$block['content'] = array(
		'#theme' => 'annotation_book_post_block',
		'#links' => $links,
		'#attached' => $attached,
		'#suffix' => implode("\n", $uploaders),
	);

	return $block;
}

/**
 * Implements the annotation view
 */
function book_annotation_book_view($annotation, $view_mode, $langcode = NULL){
	return 'annotation';
}

/**
 * The image uploader callbeck.
 */
function annotation_book_image_uploader_form($form, &$form_state) {
	$validators = array(
		'file_validate_extensions' => variable_get('annotation_book_image_extensions', array('png jpg jpeg gif')),
		'file_validate_size' => variable_get('annotation_book_file_max_size', array(file_upload_max_size())),
	);
	
	global $user;
	$form['#validators'] = $validators;
	$form['fid'] = array(
	    '#type' => 'file',
	    '#title' => t('Select an image from your computer'),
		'#upload_location' => variable_get('annotation_book_image_path', 'public://images/' . $user->uid),
	    '#upload_validators' => $validators,
		'#description' => theme('file_upload_help', array('description' => '', 'upload_validators' => $validators)),
		'#suffix' => '<input type="submit" value="' . t('Add') . '" class="bnt-attach-upload form-submit">',
	);
	
	return $form;
}

/**
 * The video uploader callbeck.
 */
function annotation_book_video_uploader_form($form, &$form_state) {
	$validators = array(
		'file_validate_extensions' => variable_get('annotation_book_video_extensions', array('flv mp4 mpeg webm 3gp')),
		'file_validate_size' => variable_get('annotation_book_file_max_size', array(file_upload_max_size())),
	);
	
	global $user;
	$form['#validators'] = $validators;
	$form['fid'] = array(
	    '#type' => 'file',
	    '#title' => t('Select a video from your computer'),
		'#upload_location' => variable_get('annotation_book_video_path', 'public://videos/' . $user->uid),
	    '#upload_validators' => $validators,
		'#description' => theme('file_upload_help', array('description' => '', 'upload_validators' => $validators)),
	);
	
	$form['submit'] = array(
	    '#type' => 'submit',
	    '#value' => t('Upload'),
	);

	return $form;
}

/**
 * Upload the video.
 */
function annotation_book_video_uploader_form_submit($form, &$form_state) {
	$filepath = isset($form['fid']['#upload_location']) ? $form['fid']['#upload_location'] : variable_get('annotation_book_image_path', 'public://images/' . $user->uid);
	file_prepare_directory($filepath, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
	$file = file_save_upload('fid', $form['#validators'], $filepath);

	if($file) {
		// Set the file permanent status
		$file->status = FILE_STATUS_PERMANENT;
		$file = file_save($file);
		drupal_chmod($file->uri);
    	drupal_set_message(t('The video @name was uploaded', array('@name' => $file->filename)));
	}
	elseif(!$file) {
		form_set_error('upload', t('An error occurred and no video was attached.'));
		return;
	}
}

/**
 * Parse webpage, return title, description and images.
 */
function _annotation_book_parse_page( $url ){
	$result = drupal_http_request($url); 	
	if ($result->code != 200) {
		return FALSE;
	} else {
		$html = @DOMDocument::loadHTML($result->data);

		$title = '';
		$nodes = $html->getElementsByTagName('title');
		if( $nodes->length > 0 ) {				
			$title = $nodes->item(0)->nodeValue;
		} else {
			$nodes = $html->getElementsByTagName('h1');
			if ( $nodes->length > 0 ) {
				$title = $nodes->item(0)->nodeValue;
			}
		}
		
		$description = '';
		$metas = $html->getElementsByTagName('meta');
		for ($i = 0; $i < $metas->length; $i++) {
			$meta = $metas->item($i);						
			if($meta->getAttribute('name') == 'description')
				$description = $meta->getAttribute('content');
		}
		
		$images = array();
		$imgs = $html->getElementsByTagName('img');
		for ($i = 0; $i < $imgs->length; $i++) {
			$images[] = $imgs->item($i)->getAttribute('src');
		}
		
		return array(
			'title' => trim($title),
			'description' => trim($description),
			'images' => $images,
		);
	}
}

function _annotation_book_parse_video($url){
	require_once 'video-parser.inc';
	return VideoParser::parse($url);
}

/**
 * Ajax callback function for annotation.
 */
function annotation_book_ajax_callback(){	
	$act = isset($_REQUEST['act']) ? $_REQUEST['act'] : '';	
		
	switch( $act ){
		case 'publish':
			if (isset($_REQUEST['msg']) && !empty($_REQUEST['msg'])) {
				global $user;
				$access = ANNOTATION_PUBLIC;
				if (isset($_REQUEST['access']) && !empty($_REQUEST['access'])) {
					if ($_REQUEST['access'] == 'Friends') {
						$access = ANNOTATION_FRIEND;
					}
					elseif ($_REQUEST['access'] == 'Private') {
						$access = ANNOTATION_PRIVATE;
					}
				}
				$annotation = new stdClass();
				$annotation->uid = $user->uid;
				$annotation->access = $access;
				$annotation->timestamp = REQUEST_TIME;
				$annotation->body = check_plain($_REQUEST['msg']);
				$annotation->attachment = isset($_REQUEST['attach']) ? $_REQUEST['attach'] : NULL;
				drupal_write_record('annotation', $annotation);
				
				$annotation_link = new stdClass();
				$annotation_link->aid = $annotation->aid;
				$annotation_link->startx = (isset($_REQUEST['startx']) && !empty($_REQUEST['startx'])) ? $_REQUEST['startx'] : 0;
	            $annotation_link->starty = (isset($_REQUEST['starty']) && !empty($_REQUEST['starty'])) ? $_REQUEST['starty'] : 0;
	            $annotation_link->width = (isset($_REQUEST['width']) && !empty($_REQUEST['width'])) ? $_REQUEST['width'] : 0;
	            $annotation_link->height = (isset($_REQUEST['height']) && !empty($_REQUEST['height'])) ? $_REQUEST['height'] : 0;
	            $annotation_link->startx = (isset($_REQUEST['startx']) && !empty($_REQUEST['startx'])) ? $_REQUEST['startx'] : 0;
	            $annotation_link->type = (isset($_REQUEST['type']) && !empty($_REQUEST['type'])) ? $_REQUEST['type'] : 0;
	            $annotation_link->points = isset($_REQUEST['points']) ? $_REQUEST['points'] : NULL;
			    $annotation_link->content = isset($_REQUEST['selected']) ? $_REQUEST['selected'] : NULL;
			    $annotation_link->bid = (isset($_REQUEST['bid']) && !empty($_REQUEST['bid'])) ? $_REQUEST['bid'] : 0;
			    $annotation_link->pid = (isset($_REQUEST['pid']) && !empty($_REQUEST['pid'])) ? $_REQUEST['pid'] : 0;
			    drupal_write_record('annotation_link', $annotation_link);
			          
	        	$ret = array('success' => t('Annotation post sucesssfully!'));
			}
			else
				$ret = array('error' => t('The request had bad syntax or was inherently impossible to be satisfied.'));
			break;
		case 'parse_page':
			$pageinfo = _annotation_book_parse_page( $_REQUEST['url'] );			
			$ret = $pageinfo ?  theme('page_info', $pageinfo) : array('error' => t('Error parsing the url.'));
			break;
		case 'parse_video':
			$info = _annotation_book_parse_video( $_REQUEST['url'] );			
			$ret = $info ? $info : array('error' => t('Error parsing the video url.'));
			break;
		default:
			$ret = array('error' => t('The request had bad syntax or was inherently impossible to be satisfied.'));
			break;	
	}
	
	if( isset($ret) )	
	die(drupal_json_encode($ret));
}
